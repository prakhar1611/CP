class Solution {
    static int binarySearch(int nums[],int low,int high,int x)
    {
        while(low<=high)
        {
            int mid = low+(high-low)/2;
            
            if(nums[mid]==x)
                return  mid;
            
            else if(nums[mid]<x)
                low=mid+1;
            
            else
                high=mid-1;
        }
        return -1;
    }
    static int findpivot(int nums[])
    {
        int low =0;
        int high=nums.length-1;
        
        while(low<=high)
        {
           int mid = low+(high-low)/2;
            
            if(mid+1<=nums.length-1&&nums[mid]>nums[mid+1])
                return mid;
            
            else if(nums[mid]<nums[0])
                high=mid-1;
            
            else low=mid+1;
        }
        return 0;
    }
    public int search(int[] nums, int target) {
    
        int pivot=findpivot(nums);
        
        int ans1 = binarySearch(nums,pivot+1,nums.length-1,target);
        int ans2 = binarySearch(nums,0,pivot,target);
        
        if(ans1==-1&&ans2==-1)
            return -1;
        
        else if(ans1!=-1)
            return ans1;
        
        return ans2;
        
    }
}