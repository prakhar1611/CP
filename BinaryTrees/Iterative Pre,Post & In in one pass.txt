/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     class Pair{
        
        TreeNode n;
        int count;
        public Pair(TreeNode n,int count)
        {
            this.n=n;
            this.count=count;
        }
    }
    public List<Integer> postorderTraversal(TreeNode root) {
          List<Integer> pre = new ArrayList<>();
        List<Integer> in = new ArrayList<>();
        List<Integer> post = new ArrayList<>();
        
        if(root==null)
            return in;
        
        Stack<Pair> s = new Stack<>();
        s.push(new Pair(root,1));
        
        while(!s.isEmpty())
        {
            if(s.peek().count==1)
            {
                Pair p = s.pop();
                pre.add(p.n.val);
                Pair p1 = new Pair(p.n,p.count+1); 
                s.push(p1);
                if(p.n.left!=null)
                    s.push(new Pair(p.n.left,1));
            }
            
            else if(s.peek().count==2)
            {
                Pair p = s.pop();
                in.add(p.n.val);
                Pair p1 = new Pair(p.n,p.count+1); 
                s.push(p1);
                
                if(p.n.right!=null)
                    s.push(new Pair(p.n.right,1));
            }
            else
            {
                Pair p = s.pop();
                post.add(p.n.val);
            }
        }
        return post;
    }
    }
